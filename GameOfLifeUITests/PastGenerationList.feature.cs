// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GameOfLifeUITests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PastGenerationListFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PastGenerationList.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PastGenerationList", " In order to simulate the game of life\n As a game of life enthusiast\n I want to h" +
                    "ave an easy way to view past generations of the world", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "PastGenerationList")))
            {
                GameOfLifeUITests.PastGenerationListFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
   testRunner.Given("The application has started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Past generations locked when simulation running")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PastGenerationList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalTest")]
        public virtual void PastGenerationsLockedWhenSimulationRunning()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Past generations locked when simulation running", new string[] {
                        "FunctionalTest"});
#line 10
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 11
   testRunner.Given("I have a world with a live cell at 1, 1 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
     testRunner.And("I have a world with a live cell at 1, 2 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
     testRunner.And("I have a world with a live cell at 1, 3 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
   testRunner.When("I run the simulation in the ui", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
   testRunner.Then("the past generation list is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Past generations unlocked when simulation paused")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PastGenerationList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalTest")]
        public virtual void PastGenerationsUnlockedWhenSimulationPaused()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Past generations unlocked when simulation paused", new string[] {
                        "FunctionalTest"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 19
   testRunner.Given("I have a world with a live cell at 1, 1 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
     testRunner.And("I have a world with a live cell at 1, 2 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
     testRunner.And("I have a world with a live cell at 1, 3 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
     testRunner.And("the simulation has started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
   testRunner.When("I pause the simulation in the ui", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
   testRunner.Then("the past generation list is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Past generations locked when simulation resumed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PastGenerationList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalTest")]
        public virtual void PastGenerationsLockedWhenSimulationResumed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Past generations locked when simulation resumed", new string[] {
                        "FunctionalTest"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 28
   testRunner.Given("I have a world with a live cell at 1, 1 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
     testRunner.And("I have a world with a live cell at 1, 2 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
     testRunner.And("I have a world with a live cell at 1, 3 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
     testRunner.And("the simulation has started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
     testRunner.And("the simulation has been paused", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
   testRunner.When("I resume the simulation in the ui", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
   testRunner.Then("the past generation list is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Past generations cleared when simulation reset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PastGenerationList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalTest")]
        public virtual void PastGenerationsClearedWhenSimulationReset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Past generations cleared when simulation reset", new string[] {
                        "FunctionalTest"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 38
   testRunner.Given("I have a world with a live cell at 3, 3 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
     testRunner.And("I have a world with a live cell at 3, 4 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
   testRunner.When("I run the simulation in the ui", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
    testRunner.And("I let the simulation run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
    testRunner.And("I reset the simulation in the ui", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
   testRunner.Then("the past generation list has no entries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
    testRunner.And("the past generation list is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Past generations stored and displayed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PastGenerationList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalTest")]
        public virtual void PastGenerationsStoredAndDisplayed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Past generations stored and displayed", new string[] {
                        "FunctionalTest"});
#line 47
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 48
   testRunner.Given("I have a world with a live cell at 3, 3 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
     testRunner.And("I have a world with a live cell at 3, 4 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
   testRunner.When("I run the simulation in the ui", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
    testRunner.And("I let the simulation run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
   testRunner.Then("the past generation list has an entry for generation 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 53
    testRunner.And("the past generation list has an entry for generation 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Selecting past generation displays in grid")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PastGenerationList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalTest")]
        public virtual void SelectingPastGenerationDisplaysInGrid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selecting past generation displays in grid", new string[] {
                        "FunctionalTest"});
#line 56
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 57
   testRunner.Given("I have a world with a live cell at 6, 6 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
     testRunner.And("I have a world with a live cell at 7, 6 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
     testRunner.And("I have a world with a live cell at 8, 6 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
     testRunner.And("I have a world with a live cell at 6, 7 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
     testRunner.And("I have a world with a live cell at 8, 7 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
     testRunner.And("I have a world with a live cell at 6, 8 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
     testRunner.And("I have a world with a live cell at 7, 8 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
     testRunner.And("I have a world with a live cell at 8, 8 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
     testRunner.And("the simulation has started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
   testRunner.When("I let the simulation run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
    testRunner.And("I pause the simulation in the ui", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
    testRunner.And("I select the past generation list entry for generation 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
   testRunner.Then("the grid matches the selected past generation list entry", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Grid locked when past generation selected")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PastGenerationList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalTest")]
        public virtual void GridLockedWhenPastGenerationSelected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Grid locked when past generation selected", new string[] {
                        "FunctionalTest"});
#line 72
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 73
   testRunner.Given("I have a world with a live cell at 1, 1 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
     testRunner.And("I have a world with a live cell at 1, 2 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
     testRunner.And("the simulation has started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
   testRunner.When("I let the simulation run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
    testRunner.And("I select the past generation list entry for generation 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
   testRunner.Then("the world should not be editable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Grid unlocked when latest generation selected")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PastGenerationList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalTest")]
        public virtual void GridUnlockedWhenLatestGenerationSelected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Grid unlocked when latest generation selected", new string[] {
                        "FunctionalTest"});
#line 81
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 82
   testRunner.Given("I have a world with a live cell at 1, 1 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 83
     testRunner.And("I have a world with a live cell at 1, 2 displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
     testRunner.And("the simulation has started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
   testRunner.When("I let the simulation run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
    testRunner.And("I select the past generation list entry for generation 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
    testRunner.And("I select the latest past generation entry", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
   testRunner.Then("the world should be editable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
